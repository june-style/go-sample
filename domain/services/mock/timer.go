// Code generated by MockGen. DO NOT EDIT.
// Source: timer.go

// Package services_mock is a generated GoMock package.
package services_mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockTimer is a mock of Timer interface.
type MockTimer struct {
	ctrl     *gomock.Controller
	recorder *MockTimerMockRecorder
}

// MockTimerMockRecorder is the mock recorder for MockTimer.
type MockTimerMockRecorder struct {
	mock *MockTimer
}

// NewMockTimer creates a new mock instance.
func NewMockTimer(ctrl *gomock.Controller) *MockTimer {
	mock := &MockTimer{ctrl: ctrl}
	mock.recorder = &MockTimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimer) EXPECT() *MockTimerMockRecorder {
	return m.recorder
}

// GetNow mocks base method.
func (m *MockTimer) GetNow(ctx context.Context) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNow", ctx)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetNow indicates an expected call of GetNow.
func (mr *MockTimerMockRecorder) GetNow(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNow", reflect.TypeOf((*MockTimer)(nil).GetNow), ctx)
}

// SetNow mocks base method.
func (m *MockTimer) SetNow(ctx context.Context) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNow", ctx)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// SetNow indicates an expected call of SetNow.
func (mr *MockTimerMockRecorder) SetNow(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNow", reflect.TypeOf((*MockTimer)(nil).SetNow), ctx)
}

// Mocktimer is a mock of timer interface.
type Mocktimer struct {
	ctrl     *gomock.Controller
	recorder *MocktimerMockRecorder
}

// MocktimerMockRecorder is the mock recorder for Mocktimer.
type MocktimerMockRecorder struct {
	mock *Mocktimer
}

// NewMocktimer creates a new mock instance.
func NewMocktimer(ctrl *gomock.Controller) *Mocktimer {
	mock := &Mocktimer{ctrl: ctrl}
	mock.recorder = &MocktimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktimer) EXPECT() *MocktimerMockRecorder {
	return m.recorder
}

// now mocks base method.
func (m *Mocktimer) now(ctx context.Context) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "now", ctx)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// now indicates an expected call of now.
func (mr *MocktimerMockRecorder) now(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "now", reflect.TypeOf((*Mocktimer)(nil).now), ctx)
}
