// Code generated by MockGen. DO NOT EDIT.
// Source: authorizer.go

// Package services_mock is a generated GoMock package.
package services_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/june-style/go-sample/domain/entities"
)

// MockAuthorizer is a mock of Authorizer interface.
type MockAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerMockRecorder
}

// MockAuthorizerMockRecorder is the mock recorder for MockAuthorizer.
type MockAuthorizerMockRecorder struct {
	mock *MockAuthorizer
}

// NewMockAuthorizer creates a new mock instance.
func NewMockAuthorizer(ctrl *gomock.Controller) *MockAuthorizer {
	mock := &MockAuthorizer{ctrl: ctrl}
	mock.recorder = &MockAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizer) EXPECT() *MockAuthorizerMockRecorder {
	return m.recorder
}

// CreateAccessKey mocks base method.
func (m *MockAuthorizer) CreateAccessKey(ctx context.Context) (*entities.RegisteredUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessKey", ctx)
	ret0, _ := ret[0].(*entities.RegisteredUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessKey indicates an expected call of CreateAccessKey.
func (mr *MockAuthorizerMockRecorder) CreateAccessKey(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessKey", reflect.TypeOf((*MockAuthorizer)(nil).CreateAccessKey), ctx)
}

// CreateSession mocks base method.
func (m *MockAuthorizer) CreateSession(ctx context.Context, userID string) (*entities.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, userID)
	ret0, _ := ret[0].(*entities.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockAuthorizerMockRecorder) CreateSession(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockAuthorizer)(nil).CreateSession), ctx, userID)
}

// VerifyAccessKey mocks base method.
func (m *MockAuthorizer) VerifyAccessKey(ctx context.Context) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAccessKey", ctx)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAccessKey indicates an expected call of VerifyAccessKey.
func (mr *MockAuthorizerMockRecorder) VerifyAccessKey(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAccessKey", reflect.TypeOf((*MockAuthorizer)(nil).VerifyAccessKey), ctx)
}

// VerifyApplicationKey mocks base method.
func (m *MockAuthorizer) VerifyApplicationKey(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyApplicationKey", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyApplicationKey indicates an expected call of VerifyApplicationKey.
func (mr *MockAuthorizerMockRecorder) VerifyApplicationKey(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyApplicationKey", reflect.TypeOf((*MockAuthorizer)(nil).VerifyApplicationKey), ctx)
}

// VerifySession mocks base method.
func (m *MockAuthorizer) VerifySession(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySession", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifySession indicates an expected call of VerifySession.
func (mr *MockAuthorizerMockRecorder) VerifySession(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySession", reflect.TypeOf((*MockAuthorizer)(nil).VerifySession), ctx)
}
