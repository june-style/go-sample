// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go

// Package entities_mock is a generated GoMock package.
package entities_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/june-style/go-sample/domain/entities"
)

// MockRegisteredUserRepository is a mock of RegisteredUserRepository interface.
type MockRegisteredUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRegisteredUserRepositoryMockRecorder
}

// MockRegisteredUserRepositoryMockRecorder is the mock recorder for MockRegisteredUserRepository.
type MockRegisteredUserRepositoryMockRecorder struct {
	mock *MockRegisteredUserRepository
}

// NewMockRegisteredUserRepository creates a new mock instance.
func NewMockRegisteredUserRepository(ctrl *gomock.Controller) *MockRegisteredUserRepository {
	mock := &MockRegisteredUserRepository{ctrl: ctrl}
	mock.recorder = &MockRegisteredUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisteredUserRepository) EXPECT() *MockRegisteredUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRegisteredUserRepository) Create(ctx context.Context, RegisteredUser *entities.RegisteredUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, RegisteredUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRegisteredUserRepositoryMockRecorder) Create(ctx, RegisteredUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRegisteredUserRepository)(nil).Create), ctx, RegisteredUser)
}

// Delete mocks base method.
func (m *MockRegisteredUserRepository) Delete(ctx context.Context, RegisteredUser *entities.RegisteredUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, RegisteredUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRegisteredUserRepositoryMockRecorder) Delete(ctx, RegisteredUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRegisteredUserRepository)(nil).Delete), ctx, RegisteredUser)
}

// Find mocks base method.
func (m *MockRegisteredUserRepository) Find(ctx context.Context, accessKey string) (*entities.RegisteredUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, accessKey)
	ret0, _ := ret[0].(*entities.RegisteredUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRegisteredUserRepositoryMockRecorder) Find(ctx, accessKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRegisteredUserRepository)(nil).Find), ctx, accessKey)
}

// MockUserProfileRepository is a mock of UserProfileRepository interface.
type MockUserProfileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserProfileRepositoryMockRecorder
}

// MockUserProfileRepositoryMockRecorder is the mock recorder for MockUserProfileRepository.
type MockUserProfileRepositoryMockRecorder struct {
	mock *MockUserProfileRepository
}

// NewMockUserProfileRepository creates a new mock instance.
func NewMockUserProfileRepository(ctrl *gomock.Controller) *MockUserProfileRepository {
	mock := &MockUserProfileRepository{ctrl: ctrl}
	mock.recorder = &MockUserProfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserProfileRepository) EXPECT() *MockUserProfileRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserProfileRepository) Create(ctx context.Context, userProfile *entities.UserProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userProfile)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserProfileRepositoryMockRecorder) Create(ctx, userProfile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserProfileRepository)(nil).Create), ctx, userProfile)
}

// Delete mocks base method.
func (m *MockUserProfileRepository) Delete(ctx context.Context, userProfile *entities.UserProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userProfile)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserProfileRepositoryMockRecorder) Delete(ctx, userProfile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserProfileRepository)(nil).Delete), ctx, userProfile)
}

// Find mocks base method.
func (m *MockUserProfileRepository) Find(ctx context.Context, userID string) (*entities.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, userID)
	ret0, _ := ret[0].(*entities.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockUserProfileRepositoryMockRecorder) Find(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserProfileRepository)(nil).Find), ctx, userID)
}

// MockUserSessionRepository is a mock of UserSessionRepository interface.
type MockUserSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserSessionRepositoryMockRecorder
}

// MockUserSessionRepositoryMockRecorder is the mock recorder for MockUserSessionRepository.
type MockUserSessionRepositoryMockRecorder struct {
	mock *MockUserSessionRepository
}

// NewMockUserSessionRepository creates a new mock instance.
func NewMockUserSessionRepository(ctrl *gomock.Controller) *MockUserSessionRepository {
	mock := &MockUserSessionRepository{ctrl: ctrl}
	mock.recorder = &MockUserSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSessionRepository) EXPECT() *MockUserSessionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserSessionRepository) Create(ctx context.Context, userSession *entities.UserSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userSession)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserSessionRepositoryMockRecorder) Create(ctx, userSession interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserSessionRepository)(nil).Create), ctx, userSession)
}

// Delete mocks base method.
func (m *MockUserSessionRepository) Delete(ctx context.Context, userSession *entities.UserSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userSession)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserSessionRepositoryMockRecorder) Delete(ctx, userSession interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserSessionRepository)(nil).Delete), ctx, userSession)
}

// Find mocks base method.
func (m *MockUserSessionRepository) Find(ctx context.Context, userID string) (*entities.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, userID)
	ret0, _ := ret[0].(*entities.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockUserSessionRepositoryMockRecorder) Find(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserSessionRepository)(nil).Find), ctx, userID)
}
