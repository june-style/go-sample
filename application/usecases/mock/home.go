// Code generated by MockGen. DO NOT EDIT.
// Source: home.go

// Package usecases_mock is a generated GoMock package.
package usecases_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecases "github.com/june-style/go-sample/application/usecases"
)

// MockHome is a mock of Home interface.
type MockHome struct {
	ctrl     *gomock.Controller
	recorder *MockHomeMockRecorder
}

// MockHomeMockRecorder is the mock recorder for MockHome.
type MockHomeMockRecorder struct {
	mock *MockHome
}

// NewMockHome creates a new mock instance.
func NewMockHome(ctrl *gomock.Controller) *MockHome {
	mock := &MockHome{ctrl: ctrl}
	mock.recorder = &MockHomeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHome) EXPECT() *MockHomeMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHome) Get(ctx context.Context, input usecases.HomeGetInputData) (usecases.HomeGetOutputData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, input)
	ret0, _ := ret[0].(usecases.HomeGetOutputData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHomeMockRecorder) Get(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHome)(nil).Get), ctx, input)
}
