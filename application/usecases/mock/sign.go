// Code generated by MockGen. DO NOT EDIT.
// Source: sign.go

// Package usecases_mock is a generated GoMock package.
package usecases_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecases "github.com/june-style/go-sample/application/usecases"
)

// MockSign is a mock of Sign interface.
type MockSign struct {
	ctrl     *gomock.Controller
	recorder *MockSignMockRecorder
}

// MockSignMockRecorder is the mock recorder for MockSign.
type MockSignMockRecorder struct {
	mock *MockSign
}

// NewMockSign creates a new mock instance.
func NewMockSign(ctrl *gomock.Controller) *MockSign {
	mock := &MockSign{ctrl: ctrl}
	mock.recorder = &MockSignMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSign) EXPECT() *MockSignMockRecorder {
	return m.recorder
}

// In mocks base method.
func (m *MockSign) In(ctx context.Context, input usecases.SignInInputData) (usecases.SignInOutputData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "In", ctx, input)
	ret0, _ := ret[0].(usecases.SignInOutputData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// In indicates an expected call of In.
func (mr *MockSignMockRecorder) In(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "In", reflect.TypeOf((*MockSign)(nil).In), ctx, input)
}

// Up mocks base method.
func (m *MockSign) Up(ctx context.Context, input usecases.SignUpInputData) (usecases.SignUpOutputData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Up", ctx, input)
	ret0, _ := ret[0].(usecases.SignUpOutputData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Up indicates an expected call of Up.
func (mr *MockSignMockRecorder) Up(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Up", reflect.TypeOf((*MockSign)(nil).Up), ctx, input)
}
